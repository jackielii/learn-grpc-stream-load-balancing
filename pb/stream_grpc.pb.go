// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: stream.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MySvc_Stream_FullMethodName  = "/MySvc/stream"
	MySvc_Trigger_FullMethodName = "/MySvc/trigger"
)

// MySvcClient is the client API for MySvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MySvcClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (MySvc_StreamClient, error)
	Trigger(ctx context.Context, in *Trigger, opts ...grpc.CallOption) (*TriggerResponse, error)
}

type mySvcClient struct {
	cc grpc.ClientConnInterface
}

func NewMySvcClient(cc grpc.ClientConnInterface) MySvcClient {
	return &mySvcClient{cc}
}

func (c *mySvcClient) Stream(ctx context.Context, opts ...grpc.CallOption) (MySvc_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MySvc_ServiceDesc.Streams[0], MySvc_Stream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mySvcStreamClient{stream}
	return x, nil
}

type MySvc_StreamClient interface {
	Send(*HttpResponse) error
	Recv() (*HttpRequest, error)
	grpc.ClientStream
}

type mySvcStreamClient struct {
	grpc.ClientStream
}

func (x *mySvcStreamClient) Send(m *HttpResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mySvcStreamClient) Recv() (*HttpRequest, error) {
	m := new(HttpRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mySvcClient) Trigger(ctx context.Context, in *Trigger, opts ...grpc.CallOption) (*TriggerResponse, error) {
	out := new(TriggerResponse)
	err := c.cc.Invoke(ctx, MySvc_Trigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MySvcServer is the server API for MySvc service.
// All implementations must embed UnimplementedMySvcServer
// for forward compatibility
type MySvcServer interface {
	Stream(MySvc_StreamServer) error
	Trigger(context.Context, *Trigger) (*TriggerResponse, error)
	mustEmbedUnimplementedMySvcServer()
}

// UnimplementedMySvcServer must be embedded to have forward compatible implementations.
type UnimplementedMySvcServer struct {
}

func (UnimplementedMySvcServer) Stream(MySvc_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedMySvcServer) Trigger(context.Context, *Trigger) (*TriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trigger not implemented")
}
func (UnimplementedMySvcServer) mustEmbedUnimplementedMySvcServer() {}

// UnsafeMySvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MySvcServer will
// result in compilation errors.
type UnsafeMySvcServer interface {
	mustEmbedUnimplementedMySvcServer()
}

func RegisterMySvcServer(s grpc.ServiceRegistrar, srv MySvcServer) {
	s.RegisterService(&MySvc_ServiceDesc, srv)
}

func _MySvc_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MySvcServer).Stream(&mySvcStreamServer{stream})
}

type MySvc_StreamServer interface {
	Send(*HttpRequest) error
	Recv() (*HttpResponse, error)
	grpc.ServerStream
}

type mySvcStreamServer struct {
	grpc.ServerStream
}

func (x *mySvcStreamServer) Send(m *HttpRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mySvcStreamServer) Recv() (*HttpResponse, error) {
	m := new(HttpResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MySvc_Trigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Trigger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySvcServer).Trigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MySvc_Trigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySvcServer).Trigger(ctx, req.(*Trigger))
	}
	return interceptor(ctx, in, info, handler)
}

// MySvc_ServiceDesc is the grpc.ServiceDesc for MySvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MySvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MySvc",
	HandlerType: (*MySvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "trigger",
			Handler:    _MySvc_Trigger_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "stream",
			Handler:       _MySvc_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}
